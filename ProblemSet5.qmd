---
title: "ProblemSet5"
author: "Yangning Tan"
format: html
editor: visual
---

## Problem 1 - Plotting

We first import the data set.

```{r}
nnmaps <- read.csv("/Users/tyn/Documents/R/data set/chicago-nmmaps.csv")
```

a.  Produce a graph of the **mean** monthly temperature in **celsius**. Draw a scatter-plot where the x-axis is month and the y-axis is the average monthly temperature in celsius. Add a line connecting the points within each season and color the lines and points by season (same color for lines and points in the same season). Be sure both x-axis and the legend are ordered appropriately, and that all labels/titles are clear and ready for publication (e.g. no variable names).

    ```{r}
    library(ggplot2)
    library(tidyverse)
    # Convert Fahrenheit to Celsius
    nnmaps$temp <- (nnmaps$temp - 32) * 5/9

    # Calculate mean monthly temperature in Celsius
    monthly_mean_temp <- nnmaps %>%
      group_by(season, month_numeric) %>%
      summarize(mean_temp = mean(temp))

    # Plot the scatter plot with lines
    ggplot(monthly_mean_temp, aes(x = month_numeric, y = mean_temp, color = season, group = season)) +
      geom_point() +
      geom_line() +
      labs(
        title = "Mean Monthly Temperature in Celsius by Season",
        x = "Month",
        y = "Mean Monthly Temperature (°C)"
      ) +
      theme(legend.position="top") +
      scale_color_manual(values = c('Winter' = 'blue', 'Spring' = 'green', 'Summer' = 'red', 'Autumn' = 'orange')) +
      scale_x_continuous(breaks = 1:12) 
    ```

b.  Produce a similar plot with four sets of lines: mean monthly temperature in celsius, mean montly O3, mean monthly PM10, and mean monthly dewpoint. Figure out a way to distinguish between the four lines. Again, make sure the plot is publication-ready (clean and clear labels).

    ```{r}
    # Calculate mean monthly values in Celsius
    monthly_mean_values <- nnmaps %>%
      group_by(month_numeric) %>%
      summarize(
        mean_temp = mean(temp, na.rm = TRUE),
        mean_o3 = mean(o3, na.rm = TRUE),
        mean_pm10 = mean(pm10, na.rm = TRUE),
        mean_dewpoint = mean(dewpoint, na.rm = TRUE)
      )

    # reshape the data
    df_long <- tidyr::gather(monthly_mean_values, key = "variable", value = "value", -month_numeric)

    # create the scatter plot with lines connecting points
    ggplot(df_long, aes(x = factor(month_numeric), y = value, color = variable, group = variable)) +
      geom_point() +
      geom_line() +
      labs(title = "Monthly Climate Features",
           x = "Month",
           y = "Mean Value") +
      scale_x_discrete(labels = month.abb)
    ```

    **"Which of the four variables seems to have the least seasonal trend?"**

    From the plot, we can see that **pm10** has the least seasonal trend.

## Problem 2 - OOP Programming

Create a class to represent a polynomial expression (such as ) called `poly`. Do this using S4.

a.  For the `poly` class, define the following:

    -   A constructor

    -   A validator

    -   A `show` method

    -   Addition and substraction

    ```{r}
    # define the "poly" class
    setClass("poly",
             slots = list(degree = "numeric",
                       coeff = "numeric"))

    # constructor
    poly <- function(degree, coeff) {
      return(new("poly", degree = degree, coeff = coeff))
    }

    # Validator method
    setMethod(
      "initialize",
      "poly",
      function(.Object, degree, coeff) {
        # Validate inputs
        if (!is.numeric(degree) || !is.numeric(coeff) || length(coeff) != degree + 1) {
          return("Invalid input. Please provide a numeric degree and coefficients.")
        }

        .Object@degree <- degree
        .Object@coeff <- coeff

        return(.Object)
      }
    )

    # show method
    setMethod("show","poly",
      function(object) {
        cat("Polynomial of degree", object@degree, "with coefficients:", object@coeff, "\n")
      }
    )

    # addition method
    setMethod(
      "+",
      signature = c("poly", "poly"),
      function(e1, e2) {
        # Determine the maximum degree
        max_degree <- max(e1@degree, e2@degree)

        # Extend coefficients with zeros
        coefficients1 <- c(e1@coeff, rep(0, max_degree - e1@degree))
        coefficients2 <- c(e2@coeff, rep(0, max_degree - e2@degree))

        # Perform addition
        result <- poly(max_degree, coefficients1 + coefficients2)
        return(result)
      }
    )

    # subtraction method
    setMethod(
      "-",
      signature = c("poly", "poly"),
      function(e1, e2) {
        # Determine the maximum degree
        max_degree <- max(e1@degree, e2@degree)

        # Extend coefficients with zeros
        coefficients1 <- c(e1@coeff, rep(0, max_degree - e1@degree))
        coefficients2 <- c(e2@coeff, rep(0, max_degree - e2@degree))

        # Perform subtraction
        result <- poly(max_degree, coefficients1 - coefficients2)
        return(result)
      }
    )
    ```

b.  Use your poly class to run the following code.

    ```{r}
    p1 <- poly(2, c(2, 0, 3))
    p2 <- poly(3, c(17, -1, -2, 7))
    p1
    p2
    p1 + p2
    p1 - p2
    ```

    I represent the polynomial with the degree and the coefficients. The coefficients are ordered from the lowest power term to the largest power term.

## Problem 3 - data table

We first import the data set

```{r}
library(nycflights13)
library(data.table)
```

a.  Generate a table reporting the mean and median departure delay per airport. Generate a second table reporting the mean and median arrival delay per airport. Exclude any destination with under 10 flights. Do this exclusion through code, not manually.

    Additionally,

    -   Order both tables in descending mean delay.

    -   Both tables should use the airport *names* not the airport *codes*.

    -   Both tables should print all rows.

    ```{r}
    # create the flights and airports table
    flights <- data.table(nycflights13::flights)
    airports <- data.table(nycflights13::airports)

    # set the name of the departure airport
    setnames(airports, "faa", "origin")

    # the first table
    flights[airports, , on = "origin"
          ][ ,.(name, dep_delay)
          ][ , .(dep_delay_mean = mean(dep_delay, na.rm = TRUE),
                 dep_delay_median = median(dep_delay, na.rm = TRUE)), by = name
          ][order(-dep_delay_mean, -dep_delay_median)]
    ```

    ```{r}
    # set the name of the arrival airport
    setnames(airports, "origin", "dest")

    # exclude destination with under 10 flights
    flights_1 <- ungroup(flights[ , .(.N, dest, arr_delay) , by = dest][N >= 10])[ , .(dest, arr_delay)]

    # the second table
    flights_1[ , .(arr_delay_mean = mean(arr_delay, na.rm = TRUE),
                   arr_delay_median = median(arr_delay, na.rm = TRUE)), by = dest
            ][airports, , on = "dest"
            ][ , .(name, arr_delay_mean, arr_delay_median)
            ][order(-arr_delay_mean, -arr_delay_median)]
    ```

b.  How many flights did the aircraft model with the fastest average speed take? Produce a tibble with 1 row, and entires for the model, average speed (in MPH) and number of flights.

    ```{r}
    # create the planes table
    planes <- data.table(nycflights13::planes)

    # the average speed of each model of plane
    speed <- planes[flights, , on = "tailnum"
                  ][ , .(model, distance, air_time)
                  ][ , .(total_distance = sum(distance, na.rm = TRUE),
                         total_time = sum(air_time, na.rm = TRUE) / 60,
                         number_of_flights = .N), by = model
                  ][ , average_speed := total_distance / total_time]

    # the model with fastest average speed
    speed[order(-average_speed)
        ][1, .(model, average_speed, number_of_flights)]
    ```
